Что это и для чего может быть нужно?
Возможность хранить
различные версии проекта
Возможность возвращаться
к различным версиям проекта

Git Сохраняет в памяти не файлы целиком,
а разницу между файлами

Что нужно
● Сохранять разные версии
● Перемещаться между ними

Исходный код программы – это отформатированный
по каким-то требованиям ТЕКСТОВЫЙ файл

Синтаксис языка Markdown.
Запомнить!
● Жирный текст — **
● Курсивный текст — *
● Зачеркнутый текст — ~
● Выделяют заголовки — # в начале строки
● Показать уровень заголовка — подчеркивание знаками = или -
● Нумерованные Списки — обозначаются обычными цифрами 1, 2, 3
● Ненумерованные Списки — обозначаются знаками * в начале строки
● Вложенные Списки — выполняем отступы


Команды git 
git --version  - проверка версии
git init -инициализация (отслеживание изменений)
git add - добавляет содержание каталога в индекс для последоюшего commit добавить ниже пример сокращенный 
git commit -a(add) -m(messej) " сохранение изменений 
git diff показывает разницу между текущим и сохраненным файлом 
git log просмотр изменений  
git status Показывает текущее состояние гита, есть 
ли изменения, которые нужно закоммитить
git checkout - Переключение между версиями. 
git branch (выбрать ветку)- просмотр, создание веток
чтобы удалить ветку нужно перед название поставить -d(deleted - перевод (git branch -d ...))
git merge (название ветки)- слияние веток с текущей
git log --graph - визуализация всех веток 
git clone(адрес репозитория) - клонирование репозитория для
работы в команде или ведение по своему развитию 
git pull - Эта команда позволяет скачать все 
из текущего репозитория и автоматически
сделать merge с нашей версией
git push - Отправить свою версию репозитория во
внешний репозиторий поможет команда git
push.При первом её использовании нужна авторизация


2               **лекция**

Работать с Git можно двумя способами:
Через командную строку (терминал).
Через IDE(программы типо VS)

Конфликт изменений
- При работе в двух ветках одновременно может
возникнуть ситуация, когда в одной и другой
ветке мы по-разному изменили блок текста.
Если затем мы попробуем слить эти ветки, Git
сообщит о конфликте и предложит выбрать,
какие же изменения записать. 


(картинки/123.jpg)????? как должен показаться ? 

3 ***************Лекция*****************

git clone(адрес репозитория) - клонирование репозитория для
работы в команде или ведение по своему развитию 
git pull - Эта команда позволяет скачать все 
из текущего репозитория и автоматически
сделать merge с нашей версией
git push - Отправить свою версию репозитория во
внешний репозиторий поможет команда git
push.При первом её использовании нужна авторизация

/*****Как настроить совместную работу
1. Создать аккаунт на GitHub.com
2. Создать локальный репозиторий
3. “Подружить” ваш локальный и удалённый репозитории. 
GitHub при создании нового репозитория подскажет, как это можно сделать
4. Отправить (push) ваш локальный репозиторий в удалённый (на GitHub), при этом, возможно, 
вам нужно будет авторизоваться на удалённом репозитории
5. Провести изменения “с другого компьютера”
6. Выкачать (pull) актуальное состояние из удалённого репозитория

pull request
➜ команда для предложения изменений
➜ запрос на вливание изменений в репозиторий
В больших компаниях один ответственный за проект создает аккаунт. Другие пользователи дают
команду pull request. Предлагать изменения на GitHub нужно в отдельной ветке. Сначала
пользователь копирует репозиторий на свой компьютер, делает fork репозитория, затем
клонирует версию на своём ПК, создаёт ветку с предлагаемыми изменениями, отправляет
изменения командой push в свой аккаунт на GitHub и даёт команду pull request. 

Как сделать pull request
Делаем   (ответвление) репозитория fork
Делаем git clone   версии репозитория СВОЕЙ
Создаем новую ветку и в НЕЕ вносим свои изменения
Фиксируем изменения (делаем коммиты)
Отправляем свою версию в свой GitHub
На сайте GitHub нажимаем кнопку pull request